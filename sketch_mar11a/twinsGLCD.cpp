#include "Arduino.h"
#include "twinsGLCD.h"


unsigned int buff[16][32];

#ifdef twinsGLCD_h
 const char font[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E,
  0x00, 0x42, 0x7F, 0x40, 0x00,
  0x72, 0x49, 0x49, 0x49, 0x46,
  0x21, 0x41, 0x49, 0x4D, 0x33,
  0x18, 0x14, 0x12, 0x7F, 0x10,
  0x27, 0x45, 0x45, 0x45, 0x39,
  0x3C, 0x4A, 0x49, 0x49, 0x31,
  0x41, 0x21, 0x11, 0x09, 0x07,
  0x36, 0x49, 0x49, 0x49, 0x36,
  0x46, 0x49, 0x49, 0x29, 0x1E,
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C,
  0x7F, 0x49, 0x49, 0x49, 0x36,
  0x3E, 0x41, 0x41, 0x41, 0x22,
  0x7F, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x49, 0x49, 0x49, 0x41,
  0x7F, 0x09, 0x09, 0x09, 0x01,
  0x3E, 0x41, 0x41, 0x51, 0x73,
  0x7F, 0x08, 0x08, 0x08, 0x7F,
  0x00, 0x41, 0x7F, 0x41, 0x00,
  0x20, 0x40, 0x41, 0x3F, 0x01,
  0x7F, 0x08, 0x14, 0x22, 0x41,
  0x7F, 0x40, 0x40, 0x40, 0x40,
  0x7F, 0x02, 0x1C, 0x02, 0x7F,
  0x7F, 0x04, 0x08, 0x10, 0x7F,
  0x3E, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x09, 0x09, 0x09, 0x06,
  0x3E, 0x41, 0x51, 0x21, 0x5E,
  0x7F, 0x09, 0x19, 0x29, 0x46,
  0x26, 0x49, 0x49, 0x49, 0x32,
  0x03, 0x01, 0x7F, 0x01, 0x03,
  0x3F, 0x40, 0x40, 0x40, 0x3F,
  0x1F, 0x20, 0x40, 0x20, 0x1F,
  0x3F, 0x40, 0x38, 0x40, 0x3F,
  0x63, 0x14, 0x08, 0x14, 0x63,
  0x03, 0x04, 0x78, 0x04, 0x03,
  0x61, 0x59, 0x49, 0x4D, 0x43,
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40,
  0x7F, 0x28, 0x44, 0x44, 0x38,
  0x38, 0x44, 0x44, 0x44, 0x28,
  0x38, 0x44, 0x44, 0x28, 0x7F,
  0x38, 0x54, 0x54, 0x54, 0x18,
  0x00, 0x08, 0x7E, 0x09, 0x02,
  0x18, 0xA4, 0xA4, 0x9C, 0x78,
  0x7F, 0x08, 0x04, 0x04, 0x78,
  0x00, 0x44, 0x7D, 0x40, 0x00,
  0x20, 0x40, 0x40, 0x3D, 0x00,
  0x7F, 0x10, 0x28, 0x44, 0x00,
  0x00, 0x41, 0x7F, 0x40, 0x00,
  0x7C, 0x04, 0x78, 0x04, 0x78,
  0x7C, 0x08, 0x04, 0x04, 0x78,
  0x38, 0x44, 0x44, 0x44, 0x38,
  0xFC, 0x18, 0x24, 0x24, 0x18,
  0x18, 0x24, 0x24, 0x18, 0xFC,
  0x7C, 0x08, 0x04, 0x04, 0x08,
  0x48, 0x54, 0x54, 0x54, 0x24,
  0x04, 0x04, 0x3F, 0x44, 0x24,
  0x3C, 0x40, 0x40, 0x20, 0x7C,
  0x1C, 0x20, 0x40, 0x20, 0x1C,
  0x3C, 0x40, 0x30, 0x40, 0x3C,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x4C, 0x90, 0x90, 0x90, 0x7C,
  0x44, 0x64, 0x54, 0x4C, 0x44,
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  
  0x00, 0xfe, 0x7c, 0x38, 0x10,
  0x10, 0x38, 0x7c, 0xfe, 0x00 ,
  0x0C, 0x3c, 0x7c, 0x3c, 0x0c,
  0x30, 0x3c, 0x3e, 0x3c, 0x30,  
  0xff, 0xff, 0xff, 0xff, 0xff,
  
};


void twinsGLCD::writeBuff(int X, int Y, unsigned char nilai){
  if(_rotate==0){
  X=127-X;
  Y=63-Y;
  }
  if(Y<32){
    if(nilai)buff[X/16][Y]|=(1<<(15-(X%16)));
    else {buff[X/16][Y]&=~(1<<(15-(X%16)));}
  }
  else{
    if(nilai)buff[X/16+8][Y-32]|=(1<<(15-(X%16)));
    else{buff[X/16+8][Y-32]&=~(1<<(15-(X%16)));}
  }
}

#endif
twinsGLCD::twinsGLCD(int rs, int rw, int e, int d4, int d5, int d6, int d7,int ps8, int rst){
 // init(rs,rw,e,d4,d5,d6,d7,ps8,rst);  
  _rs=rs;
  _rw=rw;
  _en=e;
  _d4=d4;
  _d5=d5;
  _d6=d6;
  _d7=d7;
  _ps8=ps8;
  _rst=rst;
  _rotate=0;
  _fontsize=1;
  pinMode(_ps8,OUTPUT);
  pinMode(_rst,OUTPUT);
  pinMode(_rs,OUTPUT);
  pinMode(_en,OUTPUT);
  pinMode(_rw,OUTPUT);
  pinMode(_d4,OUTPUT);
  pinMode(_d5,OUTPUT);
  pinMode(_d6,OUTPUT);
  pinMode(_d7,OUTPUT);
  isPS8=1;

  //this->init();
  /*

  */
}
twinsGLCD::twinsGLCD(int rs, int rw, int e, int d4, int d5, int d6, int d7, int rst){
 // init(rs,rw,e,d4,d5,d6,d7,ps8,rst);  
    _rs=rs;
  _rw=rw;
  _en=e;
  _d4=d4;
  _d5=d5;
  _d6=d6;
  _d7=d7;
  _rst=rst;
  isPS8=0;
  //pinMode(_ps8,OUTPUT);
  pinMode(_rst,OUTPUT);
  pinMode(_rs,OUTPUT);
  pinMode(_en,OUTPUT);
  pinMode(_rw,OUTPUT);
  pinMode(_d4,OUTPUT);
  pinMode(_d5,OUTPUT);
  pinMode(_d6,OUTPUT);
  pinMode(_d7,OUTPUT);
  //this->init();
  /*

  */
}

void twinsGLCD::setRotate(int a){
  _rotate=a;
}
void twinsGLCD::init(){
  int x,y;
  if(isPS8)
    digitalWrite(_ps8,HIGH);
    digitalWrite(_rst,HIGH); 
    digitalWrite(_rst,LOW);
    delay(5); 
    digitalWrite(_rst,HIGH);

  
  writeCommand(0b00100000); // function set, 4 bit mode
  delay(5);
  writeCommand(0b00100000); // 4 bit mode again
  delay(5);
  writeCommand(0b00001100); // display on, cursor off, blink off
  delay(5);
  writeCommand(0x01);     // display clear
  delay(5);
  writeCommand(0x06);     // Cursor moves right, no display shift.  
  delay(5);
  writeCommand(0b00000010); // Returns to home. Cursor moves to 
  writeCommand(0x20);   
  delay(1);
  writeCommand(0x24);     // Switch to extended   
  delay(1);
  writeCommand(0x26);     // Enable graphics mode.
  delay(1);

  
  for(x=0;x<16;x++)
    for(y=0;y<32;y++){
        if(x<8)
        buff[x][y]=0x0;
      else
        buff[x][y]=0;
    }

}
void twinsGLCD::data(char c){
  if(c&(1<<0))digitalWrite(_d4,HIGH); else {digitalWrite(_d4,LOW);}
  if(c&(1<<1))digitalWrite(_d5,HIGH); else {digitalWrite(_d5,LOW);}
  if(c&(1<<2))digitalWrite(_d6,HIGH); else {digitalWrite(_d6,LOW);}
  if(c&(1<<3))digitalWrite(_d7,HIGH); else {digitalWrite(_d7,LOW);}
}
void twinsGLCD::writeCommand(char c){
  digitalWrite( _rs,LOW);
  digitalWrite( _rw,LOW);
  digitalWrite( _en,1);
//  delayMicroseconds(20);
    data(c>>4);
//  delayMicroseconds(20);
  digitalWrite( _en,0);
  digitalWrite( _en,1);
//  delayMicroseconds(20);
    data(c&0xf);
//  delayMicroseconds(20);
  digitalWrite( _en,0);
  
}

void twinsGLCD::writeData(char c){
  digitalWrite( _rs,HIGH);
  digitalWrite( _rw,LOW);
  digitalWrite( _en,1);
//    delayMicroseconds(20);

    data(c>>4);
//    delayMicroseconds(20);

  digitalWrite( _en,0);
  digitalWrite( _en,1);
//  delayMicroseconds(20);
  data(c&0xf);
//  delayMicroseconds(20);

  digitalWrite( _en,0);
  
}


void twinsGLCD::draw(char *a,int x, int y){
 int k,i,j,data;

   for(k=0;k<y;k++)
  for(i=0;i<8;i++)
   for(j=0;j<x;j++){
    data= *(a+j+(k*x));
     if(data&(1<<i))
      this->writeBuff(_xCursor+j,_yCursor+(k*8)+i,1);
     else
      this->writeBuff(_xCursor+j,_yCursor+(k*8)+i,0);
   }
}

void twinsGLCD::drawProgmem(int a,int x, int y){
 int k,i,j,data;

   for(k=0;k<y;k++)
  for(i=0;i<8;i++)
   for(j=0;j<x;j++){
    data= pgm_read_byte_near(a+j+(k*x));
     if(data&(1<<i))
      this->writeBuff(_xCursor+j,_yCursor+(k*8)+i,1);
     else
      this->writeBuff(_xCursor+j,_yCursor+(k*8)+i,0);
   }
}

void twinsGLCD::write(char a){
  int i,j,k,kk; 
  char x;
  int data;
  
  data= ((int)font+(a*5));
  //cout<<(int)*(data)<<","<<(int)*(data+1)<<","<<(int)*(data+2)<<","<<(int)*(data+3)<<","<<(int)*(data+4);
  for(j=0;j<8;j++)
    for(kk=0;kk<_fontsize;kk++){
    for(i=0;i<6;i++){
     for(k=0;k<(_fontsize+_bold);k++){
       if(i<5){
         x=pgm_read_byte_near(data+i);
       }
       else{
        x=0;
       }
       if(x &(1<<j)){
        this->writeBuff(_xCursor+(i*(_fontsize+_bold))+k ,_yCursor+(j*_fontsize)+kk,1);
       }
       else {this->writeBuff(_xCursor+(i*(_fontsize+_bold))+k ,_yCursor+(j*_fontsize)+kk,0);}
     }
    }
    }
   _xCursor+=(6*(_fontsize+_bold));
}

void twinsGLCD::display(void){
  unsigned char x, y;
  
  for(y = 0; y < 32; y++)
  {

    for(x = 0; x < 16; x++)
    {
      writeCommand(0x80 | y);
      writeCommand(0x80+x);
      writeData(buff[x][y]>>8);
      writeData(buff[x][y]&0xff);
    }
  }


}

void twinsGLCD::rutinDisplay(void){
  
  static unsigned char y,x;
  int k;
  
  for(k=0;k<2;k++){
      
      
    x++;
    if(x>=16){
      x=0;
      y++;
      if(y>=32)y=0;
    }
    
      writeCommand(0x80 | y);
      writeCommand(0x80+x);
      writeData(buff[x][y]>>8);
      writeData(buff[x][y]&0xff);
    
  }


}
void twinsGLCD::print(char *a){
  while(*a){
    write(*a);
    a++;
  }
}

void twinsGLCD::setCursor(int x, int y){
 _xCursor=x;
 _yCursor=y;
} 

void twinsGLCD::setFontSize(int size){
_fontsize= size;
}

void twinsGLCD::setBold(int a){
 _bold = a; 
}

void twinsGLCD::clear(){
  for(int x=0;x<16;x++)
    for(int y=0;y<32;y++)
      buff[x][y]=0;
}

void twinsGLCD::writeCustom(unsigned char *ini){
  int i,j,k,kk; 
  char x;
  
  //cout<<(int)*(data)<<","<<(int)*(data+1)<<","<<(int)*(data+2)<<","<<(int)*(data+3)<<","<<(int)*(data+4);
  for(j=0;j<8;j++)
    for(kk=0;kk<_fontsize;kk++){
    for(i=0;i<6;i++){
     for(k=0;k<(_fontsize+_bold);k++){
       if(i<5){
         x=*(ini+i);
       }
       else{
        x=0;
       }
       if(x &(1<<j)){
        this->writeBuff(_xCursor+(i*(_fontsize+_bold))+k ,_yCursor+(j*_fontsize)+kk,1);
       }
       else {this->writeBuff(_xCursor+(i*(_fontsize+_bold))+k ,_yCursor+(j*_fontsize)+kk,0);}
     }
    }
    }
   _xCursor+=(6*(_fontsize+_bold));
}

void twinsGLCD::clearRow(unsigned char row){
  

}

void twinsGLCD::drawLine(char line){
    for(int x=0;x<128;x++){
      this->writeBuff(x,line,1);
    }
}


void buffset(unsigned int *a,unsigned char nilai, int mount){
  int i;
  for(i=0;i<mount;i++){
    *(a+i)=nilai;
  }
}
